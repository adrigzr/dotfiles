# Create a new directory and enter it
function md() {
  mkdir -p "$@" && cd "$@"
}

# find shorthand
function f() {
  find . -name "$1" 2>&1 | grep -v 'Permission denied'
}

# List all files, long format, colorized, permissions in octal
function la() {
   ls -l  "$@" | awk '
    {
      k=0;
      for (i=0;i<=8;i++)
        k+=((substr($1,i+2,1)~/[rwx]/) *2^(8-i));
      if (k)
        printf("%0o ",k);
      printf(" %9s  %3s %2s %5s  %6s  %s %s %s\n", $3, $6, $7, $8, $5, $9,$10, $11);
    }'
}

# git commit browser. needs fzf
function log() {
  git log --graph --color=always \
    --format="%C(auto)%h%d %s %C(black)%C(bold)%C(white)%cr %Creset(%C(green)%cn <%ce>)" "$@" |
  fzf --ansi --no-sort --reverse --tiebreak=index --toggle-sort=\` \
      --bind "ctrl-m:execute:
                echo {} | grep -o '[a-f0-9]\{7\}' | head -1 |
                xargs -I % sh -c 'git show --color=always % | less -R'"
}

# Start an HTTP server from a directory, optionally specifying the port
function server() {
  local port="${1:-9000}"
  # statik is good because it won't expose hidden folders/files by default.
  # npm install -g browser-sync
  browser-sync start -s -f . --no-notify --port "$port"
}

# Copy w/ progress
function cp_p () {
  rsync -WavP --human-readable --progress $1 $2
}

# get gzipped size
function gz() {
  echo "orig size    (bytes): "
  cat "$1" | wc -c
  echo "gzipped size (bytes): "
  gzip -c "$1" | wc -c
}

# whois a domain or a URL
function whois() {
  local domain=$(echo "$1" | awk -F/ '{print $3}') # get domain from URL
  if [ -z $domain ] ; then
    domain=$1
  fi
  echo "Getting whois record for: $domain â€¦"

  # avoid recursion
  # this is the best whois server
  # strip extra fluff
  /usr/bin/whois -h whois.internic.net $domain | sed '/NOTICE:/q'
}

# Extract archives - use: extract <file>
# Based on http://dotfiles.org/~pseup/.bashrc
function extract() {
  if [ -f "$1" ] ; then
    local filename=$(basename "$1")
    local foldername="${filename%%.*}"
    local fullpath=`perl -e 'use Cwd "abs_path";print abs_path(shift)' "$1"`
    local didfolderexist=false
    if [ -d "$foldername" ]; then
      didfolderexist=true
      read -p "$foldername already exists, do you want to overwrite it? (y/n) " -n 1
      echo
      if [[ $REPLY =~ ^[Nn]$ ]]; then
        return
      fi
    fi
    mkdir -p "$foldername" && cd "$foldername"
    case $1 in
      *.tar.bz2) tar xjf "$fullpath" ;;
      *.tar.gz) tar xzf "$fullpath" ;;
      *.tar.xz) tar Jxvf "$fullpath" ;;
      *.tar.Z) tar xzf "$fullpath" ;;
      *.tar) tar xf "$fullpath" ;;
      *.taz) tar xzf "$fullpath" ;;
      *.tb2) tar xjf "$fullpath" ;;
      *.tbz) tar xjf "$fullpath" ;;
      *.tbz2) tar xjf "$fullpath" ;;
      *.tgz) tar xzf "$fullpath" ;;
      *.txz) tar Jxvf "$fullpath" ;;
      *.zip) unzip "$fullpath" ;;
      *) echo "'$1' cannot be extracted via extract()" && cd .. && ! $didfolderexist && rm -r "$foldername" ;;
    esac
  else
    echo "'$1' is not a valid file"
  fi
}

# turn that video into webm.
# brew reinstall ffmpeg --with-libvpx
function webmify() {
  ffmpeg -i $1 -vcodec libvpx -acodec libvorbis -isync -copyts -aq 80 -threads 3 -qmax 30 -y $2 $1.webm
}

# direct it all to /dev/null
function nullify() {
  "$@" >/dev/null 2>&1
}

# wttr.in
function wttr() {
  curl -H "Accept-Language: ${LANG%_*}" wttr.in/"${1:-Madrid}"
}

function logcat() {
  pidcat $1 | fzf --ansi --tac --tiebreak=index -i
}

# Git short stat.
function shortstat() {
  git log --shortstat $1 | \
  awk '/^ [0-9]/ { f += $1; i += $4; d += $6 } \
  END { printf("%d files changed, %d insertions(+), %d deletions(-)", f, i, d) }'
  echo ''
}

# Git checkot fuzzy with fzf.
function select_branch() {
  local branches=$(git branch --all --sort=-committerdate 2>/dev/null)

  if [ -z "$branches" ]; then
    return 1
  fi

  local branch=$(echo $branches | awk '{ if ($1 != "*") { print $1 } }' |
    sed -e 's/remotes\///' -e 's/origin\///' | awk '!x[$0]++' |
    fzf --ansi --no-sort --reverse --tiebreak=index --toggle-sort=\` --select-1 --inline-info \
    --exit-0 --height=10 --query="$@")

  if [ -z "$branch" ]; then
    return 1
  fi

  echo -n $branch

  return 0
}

# Git checkot fuzzy with fzf.
function select_tag() {
  local tags=$(git tag --sort=-committerdate 2>/dev/null)

  if [ -z "$tags" ]; then
    return 1
  fi

  local tag=$(echo $tags | awk '!x[$0]++' |
    fzf --ansi --no-sort --reverse --tiebreak=index --toggle-sort=\` --select-1 --inline-info \
    --exit-0 --height=10 --query="$@")

  if [ -z "$tag" ]; then
    return 1
  fi

  echo -n $tag

  return 0
}

# Fuzzy vim
function fvim() {
  local files=$(fzf --ansi --no-sort --reverse --tiebreak=index --toggle-sort=\` --multi --select-1 --inline-info \
    --exit-0 --height=10 --query="$@")

  if [ -z "$files" ]; then
    return 1
  fi

  ${EDITOR:-vim} "${files[@]}"
}

# Translate.
function trans() {
    xdg-open "https://translate.google.es/?hl=es#en/es/$@"
}

# Quick transfers.
function transfer() {
  if [ $# -eq 0 ]; then
    echo -e "No arguments specified. Usage:\necho transfer /tmp/test.md\ncat /tmp/test.md | transfer test.md"
    return 1
  fi

  tmpfile=$( mktemp -t transferXXX )

  if tty -s; then
    basefile=$(basename "$1" | sed -e 's/[^a-zA-Z0-9._-]/-/g')
    curl --progress-bar --upload-file "$1" "https://transfer.sh/$basefile" >> $tmpfile
  else
    curl --progress-bar --upload-file "-" "https://transfer.sh/$1" >> $tmpfile
  fi

  cat $tmpfile
  rm -f $tmpfile >/dev/null
}

# Quick paste.
function vpaste() {
  uri="http://vpaste.net/"

  if [ -f "$1" ]; then
    out=`curl -s -F "text=<$1" "$uri?$2"`
  else
    out=`curl -s -F 'text=<-' "$uri?$1"`
  fi

  echo "$out"

  if [ -x "`which xclip 2>/dev/null`" -a "$DISPLAY" ]; then
    echo -n "$out" | xclip -i -selection primary
    echo -n "$out" | xclip -i -selection clipboard
  fi
}

# Find branch for a given commit.
function git-plumb() {
  commit=$(git rev-parse $1) # expands hash if needed
  for branch in $(git for-each-ref --format "%(refname)" refs/heads); do
    if git rev-list "$branch" | fgrep -q "$commit"; then
      echo -n "$branch"
    fi
  done
}

# Cheatsheet search.
function cheat() {
  curl "cheat.sh/$*"
}

# Lang Layout.
function layout() {
  setxkbmap $1
  setxkbmap -option
  # setxkbmap -option caps:swapescape
  setxkbmap -option compose:rwin
  setxkbmap -option compose:menu
}

# Clean memory buffers and caches.
function memfree() {
  echo "Previous memory:"
  free
  sync
  sudo swapoff -a
  sudo swapon -a
  sudo sh -c 'echo 3 >/proc/sys/vm/drop_caches'
  echo "Current memory:"
  free
}

# Note taking.
function n() {
  : "${NOTE_DIR:?'NOTE_DIR ENV Var not set'}"
  if [ $# -eq 0 ]; then
    local file
    file=$(find "${NOTE_DIR}" -name "*.md" | \
      sed -e "s|${NOTE_DIR}/||" | \
      sed -e 's/\.md$//' | \
      fzf \
        --multi \
        --select-1 \
        --exit-0 \
        --preview="cat ${NOTE_DIR}/{}.md" \
        --preview-window=right:70%:wrap)
    [[ -n $file ]] && \
      ${EDITOR:-vim} "${NOTE_DIR}/${file}.md"
  else
    case "$1" in
      "-d")
        rm "${NOTE_DIR}"/"$2".md
        ;;
      *)
        ${EDITOR:-vim} "${NOTE_DIR}"/"$*".md
        ;;
    esac
  fi
}

# Setup semantic-release env.
function semantic_env() {
  name=$(git config user.name)
  email=$(git config user.email)

  export GIT_AUTHOR_NAME=${name}
  export GIT_AUTHOR_EMAIL=${email}
  export GIT_COMMITTER_NAME=${name}
  export GIT_COMMITTER_EMAIL=${email}
}

# vim: ft=zsh
