snippet propDoc
abbr    @property / @type
alias   pd
options head
	/**
	 * ${1:Description}
	 *
	 * @property ${2:TARGET}
	 * @type {${3:type}}
	 */
	$2

snippet funcDoc
abbr    @method / @param / @returns
alias   fd
options head
	/**
	 * ${1:Description}
	 *
	 * @method ${2:TARGET}
	 * @param {${3:type}} ${4:name}
	 * @returns ${5:type}
	 */
	$2

snippet if
abbr    if(${condition}) {${TARGET}}
options head
  if (${1:condition}) {
    ${2:TARGET}
  }

snippet super
abbr    this._super(...arguments);
alias   sp
options head
  this._super(${1:...arguments});

snippet ctget
abbr    const key = this.get('key');
alias   ctget
options head
  const ${1:key} = this.get('${2:$1}');

snippet tget
abbr    this.get('key');
alias   tget
options word
  this.get('${1:key}');

snippet tset
abbr    this.set('key', key);
alias   tset
options word
  this.set('${1:key}', ${2:$1});

snippet test
abbr	test('...', function(assert) {...});
options head
  test('${1:text}', function(assert) {
    ${2:test}
  });

snippet test-arrow
abbr	test('...', (assert) => {...});
options head
  test('${1:text}', (assert) => {
    ${2:test}
  });

snippet equal
abbr	assert.equal(a, b, c);
options head
  assert.equal(${1:expect}, ${2:result}, '${3:assertion}');

snippet notEqual
abbr	assert.notEqual(a, b, c);
options head
  assert.notEqual(${1:expect}, ${2:result}, '${3:assertion}');

snippet ok
abbr	assert.ok(a, b);
options head
  assert.ok(${1:expect}, '${3:assertion}');

snippet notOk
abbr	assert.notOk(a, b);
options head
  assert.notOk(${1:expect}, '${3:assertion}');
